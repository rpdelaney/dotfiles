snippet shebang "shebang for bash" b
#!/usr/bin/env bash
#
endsnippet
snippet usage "usage function" b
# Usage {{{1
usage() {
cat <<EOD
Usage: \$(basename \$0) [OPTION]

Options
  -?, --help                  print this help and exit
  -v, --verbose               increase verbosity
  -q, --quiet                 suppress all output (ignores -v)
EOD
exit 1
}
# Usage 1}}}
endsnippet
snippet functions "standard functions" b
# Functions {{{1
log() {
  local msg=\${1:-}
  local level="\${2:-INFO}"
  now=$(date "+%Y-%m-%d %H:%M:%S%z")
  echo "$now $(hostname) \$(basename "\$0"):$level $msg" 1>&2
}
# Functions 1}}}
endsnippet
snippet parameters "command-line arguments reader"
# Parameters {{{1
#
_GETOPTS=$(getopt -o hvq --long help,verbose,quiet -n '$0' -- "$@")
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

eval set -- "$_GETOPTS"
unset _GETOPTS

while true ; do
  case "$1" in
    -h|--help)
      usage
      shift
      exit 0
      ;;
    -v|--verbose)
      # Each instance of -v adds 1 to verbosity
      verbose=$((verbose+1))
      shift
      ;;
    -q|--quiet)
      quiet="1"
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      echo "FATAL: Unknown option : $1" >&2
      exit 1
      shift
      ;;
  esac
done
# Parameters 1}}}
endsnippet
snippet depends "template for dependency check" b
if ! command -v $1 >/dev/null 2>&1 ; then echo "Missing dependency: $1" 1>&2 ; exit 1 ; fi
endsnippet
snippet dependencies "Check for dependencies" b
# Dependencies {{{1
dependencies="${1:curl awk sed}"
missing_dependencies=""

is_missing=0
for dependency in $dependencies; do
  if ! command -v "$dependency" > /dev/null 2>&1; then
    # If not found, add to missing_dependencies string
    missing_dependencies="$missing_dependencies $dependency"
    is_missing=1
  fi
done

if [ $is_missing -eq 1 ]; then
  printf "Required dependencies are missing:%s\\n" "$missing_dependencies"
  exit 1
fi

unset dependencies missing_dependencies is_missing
# Dependencies 1}}}
endsnippet
snippet which
if command -v ${1} >/dev/null 2>&1 ; then
  ${2::}
fi
endsnippet
snippet mktemp
tmpfile="$(mktemp)"
endsnippet
snippet function
# $1() {{{1
$1() {
  $2
}
# $1() 1}}}
endsnippet
snippet debugging
# TODO: Debugging tools. REMOVE THIS LATER. {{{1
set -o errexit  # exit on errors
set -o nounset  # exit on use of uninitialized variable
set -o errtrace # inherits trap on ERR in function and subshell

trap 'traperror $? $LINENO $BASH_LINENO "$BASH_COMMAND" $(printf "::%s" ${FUNCNAME[@]:-})' ERR
trap 'trapexit $? $LINENO' EXIT

trapexit() {
  log "EXIT on line \$2 (exit status \$1)" "INFO "
}

traperror () {
  local err=\$1  # error status
  local line=\$2  # LINENO
  local linecallfunc=\$3
  local command="\$4"
  local funcstack="\$5"

  log "'$command' failed at line $line - exited with status: $err" "ERROR"

  if [ "$funcstack" != "::" ]; then
    message="Error in $funcstack"
    if [ "$linecallfunc" != "" ]; then
      message="$message called at line $linecallfunc"
    fi
    log "$message" "DEBUG"
  fi

}

# End debugging tools. 1}}}
endsnippet
